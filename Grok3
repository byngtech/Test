pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: gcloud
    image: google/cloud-sdk:slim
    command:
    - sleep
    args:
    - infinity
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /path/to/service-account-key.json
  - name: helm
    image: alpine/helm:3.10.0
    command:
    - sleep
    args:
    - infinity
'''
        }
    }
    environment {
        CLUSTER_NAME = 'your-gke-cluster-name'
        PROJECT_ID = 'your-gcp-project-id'
        REGION = 'your-cluster-region'
        SA_KEY = credentials('gke-service-account-key') // Jenkins secret for service account key
    }
    stages {
        stage('Setup gcloud and kubectl') {
            steps {
                container('gcloud') {
                    sh '''
                        gcloud auth activate-service-account --key-file=$SA_KEY
                        gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $PROJECT_ID
                        kubectl version
                    '''
                }
            }
        }
        stage('Check Cluster Capacity and Management Namespace Usage') {
            steps {
                container('gcloud') {
                    script {
                        // Get total cluster capacity (CPU, memory, pods)
                        def nodeOutput = sh(script: 'kubectl get nodes -o json', returnStdout: true)
                        def nodes = readJSON(text: nodeOutput).items
                        def totalCpu = 0
                        def totalMemory = 0
                        def totalPods = 0

                        nodes.each { node ->
                            def cpu = node.status.allocatable.cpu
                            def memory = node.status.allocatable.memory
                            def pods = node.status.allocatable.pods.toInteger()
                            // Convert CPU (e.g., "3920m" to millicores)
                            if (cpu.endsWith('m')) {
                                totalCpu += cpu.replace('m', '').toInteger()
                            } else {
                                totalCpu += cpu.toInteger() * 1000
                            }
                            // Convert memory (e.g., "13498416Ki" to GiB)
                            if (memory.endsWith('Ki')) {
                                totalMemory += memory.replace('Ki', '').toFloat() / (1024 * 1024) // Convert Ki to Gi
                            } else if (memory.endsWith('Mi')) {
                                totalMemory += memory.replace('Mi', '').toFloat() / 1024 // Convert Mi to Gi
                            } else if (memory.endsWith('Gi')) {
                                totalMemory += memory.replace('Gi', '').toFloat()
                            }
                            totalPods += pods
                        }

                        // Get pod and service IP capacity
                        def clusterInfo = sh(script: "gcloud container clusters describe $CLUSTER_NAME --region $REGION --project $PROJECT_ID", returnStdout: true)
                        def podCidr = clusterInfo =~ /clusterIpv4Cidr: (\S+)/
                        def serviceCidr = clusterInfo =~ /servicesIpv4Cidr: (\S+)/
                        def totalPodIpCount = podCidr ? calculateIpCount(podCidr[0][1]) : 0
                        def totalServiceIpCount = serviceCidr ? calculateIpCount(serviceCidr[0][1]) : 0

                        // Get management namespace usage (namespaces not starting with 'ns-kcl')
                        def namespaceOutput = sh(script: 'kubectl get namespaces -o json', returnStdout: true)
                        def namespaces = readJSON(text: namespaceOutput).items
                        def mgmtCpuRequests = 0
                        def mgmtCpuLimits = 0
                        def mgmtMemoryRequests = 0
                        def mgmtMemoryLimits = 0
                        def mgmtPods = 0
                        def mgmtServices = 0

                        namespaces.each { ns ->
                            def nsName = ns.metadata.name
                            if (!nsName.startsWith('ns-kcl')) {
                                // Get ResourceQuota for the namespace
                                def quotaOutput = sh(script: "kubectl get resourcequota -n ${nsName} -o json 2>/dev/null || echo '{}'", returnStdout: true)
                                def quotas = readJSON(text: quotaOutput).items
                                quotas.each { quota ->
                                    def hard = quota.spec.hard
                                    if (hard) {
                                        // CPU requests and limits
                                        if (hard['requests.cpu']) {
                                            if (hard['requests.cpu'].endsWith('m')) {
                                                mgmtCpuRequests += hard['requests.cpu'].replace('m', '').toInteger()
                                            } else {
                                                mgmtCpuRequests += hard['requests.cpu'].toFloat() * 1000
                                            }
                                        }
                                        if (hard['limits.cpu']) {
                                            if (hard['limits.cpu'].endsWith('m')) {
                                                mgmtCpuLimits += hard['limits.cpu'].replace('m', '').toInteger()
                                            } else {
                                                mgmtCpuLimits += hard['limits.cpu'].toFloat() * 1000
                                            }
                                        }
                                        // Memory requests and limits
                                        if (hard['requests.memory']) {
                                            if (hard['requests.memory'].endsWith('Gi')) {
                                                mgmtMemoryRequests += hard['requests.memory'].replace('Gi', '').toFloat()
                                            } else if (hard['requests.memory'].endsWith('Mi')) {
                                                mgmtMemoryRequests += hard['requests.memory'].replace('Mi', '').toFloat() / 1024
                                            }
                                        }
                                        if (hard['limits.memory']) {
                                            if (hard['limits.memory'].endsWith('Gi')) {
                                                mgmtMemoryLimits += hard['limits.memory'].replace('Gi', '').toFloat()
                                            } else if (hard['limits.memory'].endsWith('Mi')) {
                                                mgmtMemoryLimits += hard['limits.memory'].replace('Mi', '').toFloat() / 1024
                                            }
                                        }
                                        // Pods and services
                                        if (hard['pods']) {
                                            mgmtPods += hard['pods'].toInteger()
                                        }
                                        if (hard['services']) {
                                            mgmtServices += hard['services'].toInteger()
                                        }
                                    }
                                }
                            }
                        }

                        // Calculate remaining capacity
                        def availableCpu = totalCpu - [mgmtCpuRequests, mgmtCpuLimits].max()
                        def availableMemory = totalMemory - [mgmtMemoryRequests, mgmtMemoryLimits].max()
                        def availablePods = totalPods - mgmtPods
                        def availableServices = totalServiceIpCount - mgmtServices

                        // Aggregate ResourceQuota from values.yaml (for ns-kcl namespaces)
                        def valuesYaml = readYaml file: 'my-resource-quotas/values.yaml'
                        def totalQuotaCpuRequests = 0
                        def totalQuotaCpuLimits = 0
                        def totalQuotaMemoryRequests = 0
                        def totalQuotaMemoryLimits = 0
                        def totalQuotaPods = 0
                        def totalQuotaServices = 0

                        valuesYaml.namespaces.each { ns ->
                            def rq = ns.resourceQuota
                            // Parse CPU
                            if (rq.requests.cpu.endsWith('m')) {
                                totalQuotaCpuRequests += rq.requests.cpu.replace('m', '').toInteger()
                            } else {
                                totalQuotaCpuRequests += rq.requests.cpu.toFloat() * 1000
                            }
                            if (rq.limits.cpu.endsWith('m')) {
                                totalQuotaCpuLimits += rq.limits.cpu.replace('m', '').toInteger()
                            } else {
                                totalQuotaCpuLimits += rq.limits.cpu.toFloat() * 1000
                            }
                            // Parse memory
                            if (rq.requests.memory.endsWith('Gi')) {
                                totalQuotaMemoryRequests += rq.requests.memory.replace('Gi', '').toFloat()
                            } else if (rq.requests.memory.endsWith('Mi')) {
                                totalQuotaMemoryRequests += rq.requests.memory.replace('Mi', '').toFloat() / 1024
                            }
                            if (rq.limits.memory.endsWith('Gi')) {
                                totalQuotaMemoryLimits += rq.limits.memory.replace('Gi', '').toFloat()
                            } else if (rq.limits.memory.endsWith('Mi')) {
                                totalQuotaMemoryLimits += rq.limits.memory.replace('Mi', '').toFloat() / 1024
                            }
                            totalQuotaPods += rq.pods.toInteger()
                            totalQuotaServices += rq.services.toInteger()
                        }

                        // Validate quotas against available capacity
                        if (totalQuotaCpuRequests > availableCpu || totalQuotaCpuLimits > availableCpu) {
                            error "CPU quota (requests: ${totalQuotaCpuRequests}m, limits: ${totalQuotaCpuLimits}m) exceeds available capacity (${availableCpu}m) after management namespace usage"
                        }
                        if (totalQuotaMemoryRequests > availableMemory || totalQuotaMemoryLimits > availableMemory) {
                            error "Memory quota (requests: ${totalQuotaMemoryRequests}Gi, limits: ${totalQuotaMemoryLimits}Gi) exceeds available capacity (${availableMemory}Gi) after management namespace usage"
                        }
                        if (totalQuotaPods > availablePods) {
                            error "Pod quota (${totalQuotaPods}) exceeds available capacity (${availablePods}) after management namespace usage"
                        }
                        if (totalQuotaServices > availableServices) {
                            error "Service quota (${totalQuotaServices}) exceeds available capacity (${availableServices}) after management namespace usage"
                        }

                        // Store results for reporting
                        env.CLUSTER_CAPACITY = "Total CPU: ${totalCpu}m, Total Memory: ${totalMemory}Gi, Total Pods: ${totalPods}, Total Service IPs: ${totalServiceIpCount}"
                        env.MGMT_USAGE = "Management CPU Requests: ${mgmtCpuRequests}m, CPU Limits: ${mgmtCpuLimits}m, Memory Requests: ${mgmtMemoryRequests}Gi, Memory Limits: ${mgmtMemoryLimits}Gi, Pods: ${mgmtPods}, Services: ${mgmtServices}"
                        env.AVAILABLE_CAPACITY = "Available CPU: ${availableCpu}m, Available Memory: ${availableMemory}Gi, Available Pods: ${availablePods}, Available Services: ${availableServices}"
                        env.QUOTA_USAGE = "Quota CPU Requests: ${totalQuotaCpuRequests}m, CPU Limits: ${totalQuotaCpuLimits}m, Memory Requests: ${totalQuotaMemoryRequests}Gi, Memory Limits: ${totalQuotaMemoryLimits}Gi, Pods: ${totalQuotaPods}, Services: ${totalQuotaServices}"
                    }
                }
            }
        }
        stage('Deploy Helm Chart') {
            steps {
                container('helm') {
                    sh '''
                        helm upgrade --install my-resource-quotas ./my-resource-quotas -f my-resource-quotas/values.yaml
                    '''
                }
            }
        }
    }
    post {
        success {
            echo "Cluster Capacity: ${env.CLUSTER_CAPACITY}"
            echo "Management Namespace Usage: ${env.MGMT_USAGE}"
            echo "Available Capacity: ${env.AVAILABLE_CAPACITY}"
            echo "Quota Usage: ${env.QUOTA_USAGE}"
            echo "Helm chart deployed successfully!"
        }
        failure {
            echo "Cluster Capacity: ${env.CLUSTER_CAPACITY}"
            echo "Management Namespace Usage: ${env.MGMT_USAGE}"
            echo "Available Capacity: ${env.AVAILABLE_CAPACITY}"
            echo "Quota Usage: ${env.QUOTA_USAGE}"
            echo "Deployment failed due to quota exceeding available capacity."
        }
    }
}

// Helper function to calculate IP count from CIDR
def calculateIpCount(cidr) {
    if (!cidr || !cidr.contains('/')) {
        error "Invalid CIDR format: ${cidr}"
    }
    def mask = cidr.split('/')[1].toInteger()
    if (mask < 0 || mask > 32) {
        error "Invalid CIDR mask: ${mask}"
    }
    return (2 ** (32 - mask)) - 2 // Use ** instead of Math.pow
}
