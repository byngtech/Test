pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: gcloud
    image: google/cloud-sdk:slim
    command:
    - sleep
    args:
    - infinity
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /path/to/service-account-key.json
  - name: helm
    image: alpine/helm:3.10.0
    command:
    - sleep
    args:
    - infinity
'''
        }
    }
    environment {
        CLUSTER_NAME = 'your-gke-cluster-name'
        PROJECT_ID = 'your-gcp-project-id'
        REGION = 'your-cluster-region'
        SA_KEY = credentials('gke-service-account-key') // Jenkins secret for service account key
    }
    stages {
        stage('Setup gcloud and kubectl') {
            steps {
                container('gcloud') {
                    sh '''
                        gcloud auth activate-service-account --key-file=$SA_KEY
                        gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project_PROJECT_ID
                        kubectl version
                    '''
                }
            }
        }
        stage('Check Cluster Capacity') {
            steps {
                container('gcloud') {
                    script {
                        // Get node capacity (CPU, memory, pods)
                        def nodeOutput = sh(script: 'kubectl get nodes -o json', returnStdout: true)
                        def nodes = readJSON(text: nodeOutput).items
                        def totalCpu = 0
                        def totalMemory = 0
                        def totalPods = 0

                        nodes.each { node ->
                            def cpu = node.status.allocatable.cpu
                            def memory = node.status.allocatable.memory
                            def pods = node.status.allocatable.pods.toInteger()
                            // Convert CPU (e.g., "3920m" to millicores)
                            if (cpu.endsWith('m')) {
                                totalCpu += cpu.replace('m', '').toInteger()
                            } else {
                                totalCpu += cpu.toInteger() * 1000
                            }
                            // Convert memory (e.g., "13498416Ki" to GiB)
                            if (memory.endsWith('Ki')) {
                                totalMemory += memory.replace('Ki', '').toFloat() / (1024 * 1024) // Convert Ki to Gi
                            } else if (memory.endsWith('Mi')) {
                                totalMemory += memory.replace('Mi', '').toFloat() / 1024 // Convert Mi to Gi
                            } else if (memory.endsWith('Gi')) {
                                totalMemory += memory.replace('Gi', '').toFloat()
                            }
                            totalPods += pods
                        }

                        // Get pod and service IP capacity
                        def clusterInfo = sh(script: "gcloud container clusters describe $CLUSTER_NAME --region $REGION --project $PROJECT_ID", returnStdout: true)
                        def podCidr = clusterInfo =~ /clusterIpv4Cidr: (\S+)/
                        def serviceCidr = clusterInfo =~ /servicesIpv4Cidr: (\S+)/
                        def podIpCount = podCidr ? calculateIpCount(podCidr[0][1]) : 0
                        def serviceIpCount = serviceCidr ? calculateIpCount(serviceCidr[0][1]) : 0

                        // Aggregate ResourceQuota from values.yaml
                        def valuesYaml = readYaml file: 'my-resource-quotas/values.yaml'
                        def totalQuotaCpuRequests = 0
                        def totalQuotaCpuLimits = 0
                        def totalQuotaMemoryRequests = 0
                        def totalQuotaMemoryLimits = 0
                        def totalQuotaPods = 0
                        def totalQuotaServices = 0

                        valuesYaml.namespaces.each { ns ->
                            def rq = ns.resourceQuota
                            // Parse CPU (e.g., "2" or "500m")
                            if (rq.requests.cpu.endsWith('m')) {
                                totalQuotaCpuRequests += rq.requests.cpu.replace('m', '').toInteger()
                            } else {
                                totalQuotaCpuRequests += rq.requests.cpu.toFloat() * 1000
                            }
                            if (rq.limits.cpu.endsWith('m')) {
                                totalQuotaCpuLimits += rq.limits.cpu.replace('m', '').toInteger()
                            } else {
                                totalQuotaCpuLimits += rq.limits.cpu.toFloat() * 1000
                            }
                            // Parse memory (e.g., "4Gi" or "512Mi")
                            if (rq.requests.memory.endsWith('Gi')) {
                                totalQuotaMemoryRequests += rq.requests.memory.replace('Gi', '').toFloat()
                            } else if (rq.requests.memory.endsWith('Mi')) {
                                totalQuotaMemoryRequests += rq.requests.memory.replace('Mi', '').toFloat() / 1024
                            }
                            if (rq.limits.memory.endsWith('Gi')) {
                                totalQuotaMemoryLimits += rq.limits.memory.replace('Gi', '').toFloat()
                            } else if (rq.limits.memory.endsWith('Mi')) {
                                totalQuotaMemoryLimits += rq.limits.memory.replace('Mi', '').toFloat() / 1024
                            }
                            totalQuotaPods += rq.pods.toInteger()
                            totalQuotaServices += rq.services.toInteger()
                        }

                        // Validate quotas against cluster capacity
                        if (totalQuotaCpuRequests > totalCpu || totalQuotaCpuLimits > totalCpu) {
                            error "CPU quota (requests: ${totalQuotaCpuRequests}m, limits: ${totalQuotaCpuLimits}m) exceeds cluster capacity (${totalCpu}m)"
                        }
                        if (totalQuotaMemoryRequests > totalMemory || totalQuotaMemoryLimits > totalMemory) {
                            error "Memory quota (requests: ${totalQuotaMemoryRequests}Gi, limits: ${totalQuotaMemoryLimits}Gi) exceeds cluster capacity (${totalMemory}Gi)"
                        }
                        if (totalQuotaPods > totalPods) {
                            error "Pod quota (${totalQuotaPods}) exceeds cluster capacity (${totalPods})"
                        }
                        if (totalQuotaServices > serviceIpCount) {
                            error "Service quota (${totalQuotaServices}) exceeds cluster capacity (${serviceIpCount})"
                        }

                        // Store results for reporting
                        env.CLUSTER_CAPACITY = "CPU: ${totalCpu}m, Memory: ${totalMemory}Gi, Pods: ${totalPods}, Service IPs: ${serviceIpCount}"
                        env.QUOTA_USAGE = "CPU Requests: ${totalQuotaCpuRequests}m, CPU Limits: ${totalQuotaCpuLimits}m, Memory Requests: ${totalQuotaMemoryRequests}Gi, Memory Limits: ${totalQuotaMemoryLimits}Gi, Pods: ${totalQuotaPods}, Services: ${totalQuotaServices}"
                    }
                }
            }
        }
        stage('Deploy Helm Chart') {
            steps {
                container('helm') {
                    sh '''
                        helm upgrade --install my-resource-quotas ./my-resource-quotas -f my-resource-quotas/values.yaml
                    '''
                }
            }
        }
    }
    post {
        success {
            echo "Cluster Capacity: ${env.CLUSTER_CAPACITY}"
            echo "Quota Usage: ${env.QUOTA_USAGE}"
            echo "Helm chart deployed successfully!"
        }
        failure {
            echo "Cluster Capacity: ${env.CLUSTER_CAPACITY}"
            echo "Quota Usage: ${env.QUOTA_USAGE}"
            echo "Deployment failed due to quota exceeding cluster capacity."
        }
    }
}

// Helper function to calculate IP count from CIDR
def calculateIpCount(cidr) {
    def mask = cidr.split('/')[1].toInteger()
    return Math.pow(2, 32 - mask) - 2 // Subtract 2 for network and broadcast IPs
}
